name: CI

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'

jobs:
  linting:
    name: "Linting (swift-format)"
    runs-on: macos-26
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install swift-format
        run: brew install swift-format

      - name: SwiftFormat
        run: swiftformat --lint . --reporter github-actions-log

  test-darwin:
    name: "Test (on ${{ matrix.platform.name }})"
    runs-on: macos-26

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: 'macOS', grep: 'macOS' }
          - { name: 'iOS', grep: 'iPhone' }
          - { name: 'tvOS', grep: 'Apple TV' }
          - { name: 'watchOS', grep: 'Apple Watch' }
          - { name: 'visionOS', grep: 'Apple Vision' }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode 26.0
        run: sudo xcode-select -s /Applications/Xcode_26.0.app

      - name: Build and run tests
        run: |
          PLATFORM_NAME="${{ matrix.platform.name }}"
          if [[ "$PLATFORM_NAME" == "macOS" ]]; then
            xcodebuild test -scheme ya-swift-html-xml-parser -destination "platform=macOS,arch=arm64"
          else
            GREP_PATTERN="${{ matrix.platform.grep }}"
            UDID=$(xcrun simctl list devices available | grep -m 1 "$GREP_PATTERN" | awk 'match($0, /\(([-0-9A-F]+)\)/) { print substr($0, RSTART + 1, RLENGTH - 2) }')
            
            if [ -z "$UDID" ]; then
              echo "::error::Could not find an available simulator for ${PLATFORM_NAME}"
              exit 1
            fi

            echo "Found available ${PLATFORM_NAME} simulator with UDID: ${UDID}"
            
            xcodebuild test -scheme ya-swift-html-xml-parser -destination "platform=${PLATFORM_NAME} Simulator,id=${UDID}"
          fi

  test-linux-stable:
    name: "Test (Swift 6.2 on Ubuntu 24.04 LTS)"
    runs-on: ubuntu-latest
    container: 'swift:6.2.0-noble'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install libxml2
        run: apt-get update && apt-get install -y libxml2-dev

      - name: Build and run tests
        run: swift test
